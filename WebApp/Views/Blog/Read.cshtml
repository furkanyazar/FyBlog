@using Entities.Concrete
@model Blog

@{
	ViewData["Title"] = Model.BlogTitle;
	Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<section class="banner-bottom">
	<!--/blog-->
	<div class="container">
		<div class="row">
			<!--left-->
			<div class="col-lg-8 left-blog-info-w3layouts-agileits text-left">
				<div class="blog-grid-top">
					<div class="b-grid-top">
						<div class="blog_info_left_grid">
							<img src="@Model.BlogImageUrl" class="img-fluid" alt="" style="width:100%">
						</div>
						<div class="blog-info-middle">
							<ul>
								<li>
									<a href="#">
										<i class="fas fa-calendar-alt">
											@if (Model.BlogDateOf.Year == DateTime.Now.Year)
											{
												Write(Model.BlogDateOf.ToString("dd MMMM"));
											}
											else
											{
												Write(Model.BlogDateOf.ToString("dd MMMM yyyy"));
											}
										</i>
									</a>
								</li>
								<li class="mx-3">
									<a href="#">
										<i class="fas fa-user"></i> @Model.Writer.User.UserFirstName @Model.Writer.User.UserLastName
									</a>
								</li>
								<li>
									<a href="#">
										<i class="fas fa-list"></i> @Model.Category.CategoryName
									</a>
								</li>
							</ul>
						</div>
					</div>
					<h3 class="my-3">
						@Model.BlogTitle
					</h3>
					<div id="model-content">
						@Html.Raw(Model.BlogContent)
					</div>
				</div>
				@await Component.InvokeAsync("BlogReadComments", Model.BlogId)
				@await Html.PartialAsync("~/Views/Default/BlogReadAddCommentPartial.cshtml", Model.BlogId)
			</div>
			<!--//left-->
			<!--right-->
			<aside class="col-lg-4 agileits-w3ls-right-blog-con text-right">
				<div class="right-blog-info text-left">
					<div class="tech-btm">
						<img src="@Model.BlogThumbnailImageUrl" class="img-fluid" alt="">
					</div>
					@await Html.PartialAsync("~/Views/Default/BlogReadRightSignupNewsletterPartial.cshtml")
					@await Component.InvokeAsync("BlogReadRightCategories")
					@await Component.InvokeAsync("BlogReadRightSimilarBlogs", new { Model.BlogId, Model.CategoryId })
					@await Component.InvokeAsync("BlogReadRightLatest")
				</div>
			</aside>
			<!--//right-->
		</div>
	</div>
</section>
<script>
	$(document).ready(function() {
		var yOffset = $(window.location.hash).offset().top;
		$("body").scrollTop(yOffset);
	});
</script>
